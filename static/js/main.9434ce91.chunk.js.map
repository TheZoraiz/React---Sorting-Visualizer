{"version":3,"sources":["components/Header.js","components/Array.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","useState","chosenSort","setSort","className","onClick","id","outsider","Array","rangeVal","setVal","speed","setSpeed","clickable","setClickable","console","log","sortHistory","interval","undefined","warn","generateArray","count","parseInt","bars","i","barHeight","Math","round","random","barWidth","push","style","height","width","margin","array","setArray","mergeSort","arr","passedI","passedJ","length","mid","floor","passedMid","firstHalf","slice","secondHalf","sorted","j","tempCount","changeElementColor","generate","sortIt","swapp","n","x","a","b","temp","bubbleSort","min","old","tmp","selectionSort","current","insertionSort","tempArr","showHistory","c","setInterval","clearInterval","element","color","React","cloneElement","backgroundColor","textAlign","type","max","value","onChange","event","target","fontSize","fontWeight","window","location","reload","App","warning","setWarning","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9434ce91.chunk.js","sourcesContent":["import './Header.css';\r\nimport { useState } from 'react';\r\n\r\nfunction Header(props) {\r\n    const [chosenSort, setSort] = useState('Bubble Sort')\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Sorting Algorithm Visualizer</h1>\r\n            <p className='daddy'>By Zoraiz</p>\r\n            \r\n            <div className='controls'>\r\n                <h3 className='sorts' onClick={() => {\r\n                    setSort('Bubble Sort');\r\n                    props.setSort('Bubble Sort');\r\n                }}>Bubble Sort</h3>\r\n                \r\n                <h3 className='sorts' onClick={() => {\r\n                    setSort('Selection Sort');\r\n                    props.setSort('Selection Sort');\r\n                }}>Selection Sort</h3>\r\n\r\n                <h3 className='sorts' onClick={() => {\r\n                    setSort('Insertion Sort');\r\n                    props.setSort('Insertion Sort');\r\n                }}>Insertion Sort</h3>\r\n\r\n                <h3 className='sorts' onClick={() => {\r\n                    setSort('Merge Sort');\r\n                    props.setSort('Merge Sort');\r\n                }}>Merge Sort</h3>\r\n\r\n                {/* <h3 className='sorts' onClick={() => {\r\n                    setSort('Quick Sort');\r\n                    props.setSort('Quick Sort');\r\n                }}>Quick Sort</h3> */}\r\n            </div>\r\n            \r\n            <p id='chosen'>{chosenSort}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import './Array.css';\r\nimport React, { useState } from 'react';\r\n\r\n\r\n// Used for mergeSort()'s logic\r\nlet outsider = [];\r\n\r\nfunction Array(props) {\r\n    const [ rangeVal, setVal ] = useState(20);\r\n    const [ speed, setSpeed ] = useState(500);\r\n    const [ clickable, setClickable ] = useState(true);\r\n    console.log(500 - speed);\r\n\r\n    let sortHistory = [];\r\n    let interval = undefined;\r\n\r\n    if(props.chosenSort == 'Merge Sort')\r\n        props.warn('red');\r\n    else\r\n        props.warn('black');\r\n\r\n    const generateArray = (count) => {\r\n        count = parseInt(count);\r\n        let bars = [];\r\n        for(let i = 0; i < count; i++) {\r\n            let barHeight = Math.round((Math.random() * 850) + 50);\r\n            let barWidth = (count > 25 ? ( 1000 / ( count + 5  ) ) : 30);\r\n            bars.push(\r\n                <div \r\n                  className='bars'\r\n                  style={{height: barHeight/2, width: barWidth, margin: 1}}\r\n                >\r\n                  { count < 40 ? <p>{ barHeight }</p> : <p></p>}\r\n                </div>\r\n            )\r\n        }\r\n        return bars;\r\n    }\r\n    const [ array, setArray ] = useState(generateArray(rangeVal));\r\n\r\n\r\n    const bubbleSort = () => {\r\n        let swapp;\r\n        let n = array.length - 1;\r\n        let x = [...array];\r\n        swapp = true;\r\n\r\n        while (swapp) {\r\n            swapp = false;\r\n            for (let i = 0; i < n; i++)\r\n            {\r\n                let a = x[i].props.style.height;\r\n                let b = x[i+1].props.style.height;\r\n\r\n                // Highlight the iterators\r\n                x[i] = changeElementColor(x[i], 'green');\r\n                x[i+1] = changeElementColor(x[i+1], 'green');\r\n\r\n                // Swapping condition for BUBBLE SORT\r\n                if (a > b) {\r\n                    x[i] = changeElementColor(x[i], 'red');\r\n                    x[i+1] = changeElementColor(x[i+1], 'red');\r\n\r\n                    sortHistory.push([...x]);\r\n                    let temp = x[i];\r\n                    x[i] = x[i+1];\r\n                    x[i+1] = temp;\r\n                    swapp = true;     \r\n\r\n                    x[i] = changeElementColor(x[i], 'green');\r\n                    x[i+1] = changeElementColor(x[i+1], 'green');\r\n                    sortHistory.push([...x]);\r\n                } else {\r\n                    sortHistory.push([...x]);\r\n                }\r\n\r\n                x[i] = changeElementColor(x[i], 'turquoise');\r\n                x[i+1] = changeElementColor(x[i+1], 'turquoise');\r\n\r\n                if(!swapp)\r\n                    sortHistory.push([...x]);\r\n\r\n            }\r\n            n--;\r\n        }        \r\n\r\n        console.log(sortHistory);\r\n    }\r\n\r\n    const insertionSort = () => {\r\n        let x = [...array];\r\n        let n = x.length;\r\n        for (let i = 1; i < n; i++) {\r\n            // Choosing the first element in our unsorted subarray\r\n            x[i] = changeElementColor(x[i], 'red');\r\n            let current = x[i];\r\n            sortHistory.push([...x]);\r\n            // The last element of our sorted subarray\r\n            let j = i-1; \r\n            \r\n            while ((j > -1) && (current.props.style.height < x[j].props.style.height)) {\r\n                x[j+1] = x[j];\r\n                x[j+1] = changeElementColor(x[j+1], 'red');\r\n                sortHistory.push([...x]);\r\n\r\n                x[j+1] = changeElementColor(x[j+1], 'turquoise');\r\n                sortHistory.push([...x]);\r\n                j--;\r\n            }\r\n            x[j+1] = current;\r\n            x[j+1] = changeElementColor(x[j+1], 'green');\r\n            sortHistory.push([...x]);\r\n            x[j+1] = changeElementColor(x[j+1], 'turquoise');\r\n            sortHistory.push([...x]);\r\n        }\r\n    }\r\n\r\n\r\n    const mergeSort = (arr, passedI, passedJ) => {\r\n        if(arr.length == 1) return arr;\r\n    \r\n        let mid = Math.floor(arr.length / 2);\r\n        let passedMid = Math.floor((passedI + passedJ) / 2);\r\n    \r\n        let firstHalf = mergeSort(arr.slice(0, mid), passedI, passedMid);\r\n        let secondHalf = mergeSort(arr.slice(mid), passedMid, passedJ);\r\n    \r\n        // The Merge Part\r\n    \r\n        let sorted = [];\r\n    \r\n        let i = 0, j = 0;\r\n    \r\n        let tempCount = 0;\r\n        while(i < firstHalf.length && j < secondHalf.length) {\r\n            firstHalf[i] = changeElementColor(firstHalf[i], 'green');\r\n            secondHalf[j] = changeElementColor(secondHalf[j], 'red');\r\n        \r\n\r\n            if(firstHalf[i].props.style.height < secondHalf[j].props.style.height) {\r\n                \r\n                sorted.push(firstHalf[i++]);\r\n                outsider[passedI + (tempCount++)] = firstHalf[i - 1];\r\n                sortHistory.push([...outsider]);\r\n\r\n                firstHalf[i - 1] = changeElementColor(firstHalf[i - 1], 'turquoise');\r\n                secondHalf[j] = changeElementColor(secondHalf[j], 'turquoise');\r\n\r\n                outsider[passedI + (tempCount - 1)] = firstHalf[i - 1];\r\n                \r\n                sortHistory.push([...outsider]);\r\n                \r\n                \r\n            } else {\r\n\r\n                sorted.push(secondHalf[j++]);\r\n                outsider[passedI + (tempCount++)] = secondHalf[j - 1];\r\n                sortHistory.push([...outsider]);\r\n\r\n                firstHalf[i] = changeElementColor(firstHalf[i], 'turquoise');\r\n                secondHalf[j - 1] = changeElementColor(secondHalf[j - 1], 'turquoise');\r\n\r\n                outsider[passedI + (tempCount - 1)] = secondHalf[j - 1];\r\n\r\n                sortHistory.push([...outsider]);\r\n\r\n            }\r\n        }\r\n        while(i < firstHalf.length) {\r\n\r\n            sorted.push(firstHalf[i++]);\r\n            firstHalf[i - 1] = changeElementColor(firstHalf[i - 1], 'green');\r\n            outsider[passedI + (tempCount++)] = firstHalf[i - 1];\r\n            sortHistory.push([...outsider]);\r\n\r\n            firstHalf[i - 1] = changeElementColor(firstHalf[i - 1], 'turquoise');\r\n            outsider[passedI + (tempCount - 1)] = firstHalf[i - 1];\r\n            sortHistory.push([...outsider]);\r\n        };\r\n        while(j < secondHalf.length) {\r\n\r\n            sorted.push(secondHalf[j++]);\r\n            secondHalf[j - 1] = changeElementColor(secondHalf[j - 1], 'red');\r\n            outsider[passedI + (tempCount++)] = secondHalf[j - 1];\r\n            sortHistory.push([...outsider]);\r\n            \r\n            secondHalf[j - 1] = changeElementColor(secondHalf[j - 1], 'turquoise');\r\n            outsider[passedI + (tempCount - 1)] = secondHalf[j - 1];\r\n            sortHistory.push([...outsider]);\r\n        };\r\n        return sorted;\r\n    }\r\n\r\n    const selectionSort = () => { \r\n        let n = array.length;\r\n        let x = [...array];\r\n            \r\n        for(let i = 0; i < n; i++) {\r\n            // Finding the smallest number in the subarray\r\n            let min = i;\r\n            for(let j = i+1; j < n; j++){\r\n                x[j] = changeElementColor(x[j], 'green');\r\n                x[min] = changeElementColor(x[min], 'green');\r\n                sortHistory.push([...x]);\r\n\r\n                if(x[j].props.style.height < x[min].props.style.height) {\r\n\r\n                    x[j] = changeElementColor(x[j], 'red');\r\n                    x[min] = changeElementColor(x[min], 'red');\r\n                    sortHistory.push([...x]);\r\n                    \r\n                    let old = min;\r\n                    min=j; \r\n                    \r\n                    x[old] = changeElementColor(x[old], 'turquoise');\r\n                    sortHistory.push([...x]);\r\n                    continue;\r\n                }\r\n                \r\n                x[j] = changeElementColor(x[j], 'turquoise');\r\n                x[min] = changeElementColor(x[min], 'turquoise');\r\n                sortHistory.push([...x]);\r\n\r\n             }\r\n             if (min != i) {\r\n                 // Swapping the elements\r\n                x[i] = changeElementColor(x[i], 'green');\r\n                x[min] = changeElementColor(x[min], 'green');\r\n                sortHistory.push([...x]);\r\n                let tmp = x[i]; \r\n                x[i] = x[min];\r\n                x[min] = tmp;      \r\n                x[i] = changeElementColor(x[i], 'turquoise');\r\n                x[min] = changeElementColor(x[min], 'turquoise');\r\n                sortHistory.push([...x]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const quickSort = () => {\r\n\r\n    }\r\n\r\n    const generate = () => {\r\n        setArray(generateArray(rangeVal));\r\n    }\r\n    \r\n    const changeVal = (event) => {\r\n        setVal(event.target.value);\r\n        generate();\r\n    }\r\n\r\n    const changeSpeed = (event) => {\r\n        setSpeed(event.target.value);\r\n    }\r\n\r\n    const sortIt = (chosenSort) => {\r\n        setClickable(false);\r\n        sortHistory = [];\r\n\r\n        switch(chosenSort) {\r\n            case 'Bubble Sort':\r\n                bubbleSort();\r\n                break;\r\n\r\n            case 'Selection Sort':\r\n                selectionSort();\r\n                break;\r\n            \r\n            case 'Insertion Sort':\r\n                insertionSort();\r\n                break;\r\n            \r\n            case 'Merge Sort':\r\n                outsider = [];\r\n                outsider = [...array];\r\n                let tempArr = [...array];\r\n                mergeSort(tempArr, 0, tempArr.length - 1);\r\n                // console.log(outsider);\r\n                outsider = [];\r\n                break;\r\n\r\n            case 'Quick Sort':\r\n                quickSort();\r\n                break;\r\n        }\r\n\r\n        showHistory();\r\n    }\r\n\r\n    const iterate = arr => {\r\n        setArray([...arr]);\r\n    }\r\n\r\n    const showHistory = () => {\r\n        let c = 0;\r\n        if(sortHistory.length != 0) {\r\n            interval = setInterval(() => {\r\n                if(c < sortHistory.length - 1)\r\n                    c++;\r\n                else {\r\n                    clearInterval(interval);\r\n                    setClickable(true);\r\n                }\r\n                iterate([...sortHistory[c]]);\r\n            }, 500 - speed);\r\n        }\r\n    }\r\n\r\n    const changeElementColor = (element, color) => {\r\n        return React.cloneElement(element, {\r\n            style: {\r\n                ...element.props.style,\r\n                backgroundColor: color,\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='array-body'>\r\n            <div id='texts'>\r\n                <div id='texts'>\r\n                <div>\r\n                    <p style={{textAlign: 'center'}}>Number of elements: <br></br> {rangeVal}</p>\r\n                    <input\r\n                        id='range'\r\n                        type='range'\r\n                        min={20} max={200}\r\n                        value={rangeVal} \r\n                        onChange={changeVal}\r\n                    />\r\n                </div>\r\n                </div>\r\n                \r\n                 <div style={{margin: '0 40px'}}>\r\n                    <p style={{fontSize: 17, textAlign: 'center'}}><b>Sorting Speed</b>:<br></br> Depends upon your CPU as well</p>\r\n                    <input\r\n                        id='rangeSpeed'\r\n                        type='range'\r\n                        min={1} max={500}\r\n                        value={speed} \r\n                        onChange={changeSpeed}\r\n                    />\r\n                </div>\r\n                \r\n                <button className='sort-button' style={{fontWeight: 'bold', fontSize: 25}} onClick={() => {\r\n                    if(clickable) sortIt(props.chosenSort);\r\n                }}>Sort !</button>\r\n                    \r\n                <button className='generator' onClick={() => {\r\n                    if(clickable) generate();\r\n                }}>Generate New Array</button>\r\n\r\n                <button className='sort-button' onClick={() => window.location.reload()}>Reset / Stop</button>\r\n            </div>\r\n            <div className='array-container'>\r\n                {array}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Array;\r\n","import './App.css';\nimport Header from  './components/Header.js'\nimport Array from  './components/Array.js'\nimport { useState } from 'react';\n\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => ++value); // update the state to force render\n}\n\nfunction App() {\n  const [ chosenSort, setSort ] = useState('Bubble Sort');\n  const [ warning, setWarning ] = useState('red')\n\n  return (\n    <div className=\"App\">\n\n      <Header setSort={setSort}/>\n      <p id='merge-warning' style={{display: 'block', color: warning, textAlign: 'center'}}>(Warning: Merge Sort is best visualized on large arrays with fast speeds due to its recursive nature)</p>\n\n      <Array chosenSort={chosenSort} warn={setWarning}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}